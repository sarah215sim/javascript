/* 2021.07.16 코딩시간 
* JS 프로그램에서 사용하지 않는 문장이 있습니다.
    - label 문장의 코드를 작성하고 사용되지 않는 이유를 설명하세요.
* "use strict" 아래에 with문을 사용한 코드를 작성하세요.
    - 에러가 발생하는 것을 확인하세요.
*/


/* label */
// 반복문에서 break continue 구문과 함께 사용
// 원하는 식별자로 구문 앞에 레이블을 추가함
// 반복문의 어느 위치에서 작업을 멈추고 어느 위치에서 다시 수행할지를 알려줌
label : //JS에서 사용할 수 있는 식별자면 모두 가능 but let은 JS에서 허용되지 않는 식별자
    statement
// JS에는 goto구문이 없기때문에 break나 continue에서만 레이블 사용가능 


/* for문에서 label 사용하기 */
"use strict"
var i, j ;

loop1:
for (i = 0; i < 3; i++) {      //첫번째 for문은 "loop1" 레이블을 붙였다.
   loop2:
   for (j = 0; j < 3; j++) {   //두번째 for문은 "loop2" 레이블을 붙였다.
      if (i === 1 && j === 1) {
         continue loop1;
      }
      console.log('i = ' + i + ', j = ' + j);
   }
}
// 출력 결과:
//   "i = 0, j = 0"
//   "i = 0, j = 1"
//   "i = 0, j = 2"
//   "i = 1, j = 0"
//   "i = 2, j = 0"
//   "i = 2, j = 1"
//   "i = 2, j = 2"
// 다음 두 경우를 어떻게 스킵하는지 주목 : "i = 1, j = 1", "i = 1, j = 2"

/* continue문에서 label 사용하기 */


/* label로 직접 이동하는 것은 goto 문을 사용하는 것과 같습니다. 
반복이 끝나면 아래로 내려가게 되므로 코드의 가독성을 확보할 수 있지만, 
반복문에서 임의의 곳으로 이동하면 따라가야 하며, 
그러다 보면 코드 흐름(프로세스, 처리)이 엉킬 수 있습니다. 
함수에서 다른 함수를 호출했을 때, 호출된 함수의 실행이 끝나면 호출한 함수로 돌아옵니다. 
이런 형태가 되어야 코드 흐름이 엉키지 않습니다. 
label은 이런 흐름을 깨뜨리 수 있습니다. */


/* with */

with (expression)
    statement

/* with 문을 사용하지 않아야 하는 이유 https://unikys.tistory.com/304 */